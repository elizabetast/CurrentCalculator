import telebot
from telebot.types import KeyboardButton, ReplyKeyboardMarkup
import requests
from datetime import datetime

from config import bot, APPID, keys
from exceptions import ConvertionException
from utils import get_wind_direction, get_exchange_rate
from texts import KeyboardTexts

import openpyxl
import random

import utils


@bot.message_handler(commands=['start'])
def welcome_message(message):
    """Start interface function.

            :arg message: request from bot.
            :return: hello message.

        """
    markup = ReplyKeyboardMarkup(resize_keyboard=True,
                                 row_width=2)
    weather_button = KeyboardButton(KeyboardTexts.WEATHER)
    currency_rate_button = KeyboardButton(KeyboardTexts.CURRENCY_RATE)
    exchange_currency_button = KeyboardButton(KeyboardTexts.EXCHANGE_CURRENCY)
    random_cits_button = KeyboardButton(KeyboardTexts.CITS)
    markup.add(weather_button, currency_rate_button, exchange_currency_button, random_cits_button)
    bot.send_message(message.chat.id,
                     f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {message.chat.username}!ü•ê\n\n–ö–æ–º–∞–Ω–¥–∞ Good Mo –∂–µ–ª–∞–µ—Ç —Ç–µ–±–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –¥–Ω—è.\n\n"
                     f"–ù–∞—á–Ω–∏ —Å–≤–æ—ë —É—Ç—Ä–æ —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å –∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å ?–º–µ–Ω—è—Ç—å –∏–ª–∏ –Ω–µ –º–µ–Ω—è—Ç—å?""\n\n –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ.",
                     reply_markup=markup)


def request_forecast(message):
    """Function showing weather forecast for a day.

        :arg message: request from bot.
        :return: message with forecast data.

    """
    try:
        res = requests.get("http://api.openweathermap.org/data/2.5/forecast",
                           params={'id': 519690, 'units': 'metric',
                                   'lang': 'ru', 'APPID': APPID})
        data = res.json()
        today = datetime.now().day
        today_forecast = list(filter(
            lambda x: datetime.strptime(x["dt_txt"][:10],
                                        "%Y-%m-%d").day == today,
            data['list']))
        result = ["üå• –ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"]
        for i in today_forecast:
            time = datetime.strptime(i["dt_txt"],
                                     "%Y-%m-%d %H:%M:%S").strftime("%H:%M")
            result.append(
                f"‚è∞ {time}:\nüå° {i['main']['temp']} ¬∞C\nüí® {str(i['wind']['speed'])}–º/—Å. {i['weather'][0]['description']} \n –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {get_wind_direction(i['wind']['deg'])}\n")

        bot.send_message(message.chat.id, "\n".join(result))
    except Exception as e:
        bot.reply_to(message, f'–ü–æ–≥–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n{e}')


def converter(message: telebot.types.Message):
    """Money exchange function.

        :arg message: request from bot.
        :return: message with amount exchanged.

        """
    try:
        values = message.text.split()  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —Ç—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞

        if len(values) != 3:
            raise ConvertionException('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.')

        quote, base, amount = values

        if quote not in keys:
            raise ValueError(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞–ª—é—Ç—É {quote}')

        if base not in keys:
            raise ValueError(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞–ª—é—Ç—É {base}')

        if quote == base:
            raise ConvertionException(
                f'–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã {base}')

        rate = float(
            utils.get_exchange_rate(quote + base)['data'][quote + base])

    except ValueError as e:
        bot.reply_to(message, f'–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n{e}')

    else:
        text = f'{amount} {quote} = {rate * float(amount)} {base} '  # –≤—ã–≤–æ–¥ –ø–æ–¥—Å—á—ë—Ç–æ–≤
        bot.send_message(message.chat.id, text)


def request_available_currency(message: telebot.types.Message):
    """Function showing list of available currency.

        :arg message: request from bot.
        :return: message list of currency.

        """
    bot.send_message(message.chat.id, f'–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã: \n' \
                                      f'üá¨üáß USD = {get_exchange_rate("USDRUB")["data"]["USDRUB"]} RUB \n' \
                                      f'üá™üá∫ EUR = {get_exchange_rate("EURRUB")["data"]["EURRUB"]} RUB \n' \
                                      f'üáßüáæ BYN = {get_exchange_rate("BYNRUB")["data"]["BYNRUB"]} RUB ')


def exchange_currency(message: telebot.types.Message):
    """Instruction of using exchange function.

        :arg message: request from bot.
        :return instruction for exchanger.

        """
    bot.send_message(message.chat.id,
                     f'–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ–±–º–µ–Ω–Ω–∏–∫–æ–º –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞: \n\n'
                     f'<–ò–º—è –≤–∞–ª—é—Ç—ã, —Å—É–º–º—É –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å> <–ò–º—è –≤–∞–ª—é—Ç—ã, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞–¥–æ —É–∑–Ω–∞—Ç—å —Å—É–º–º—É –ø–µ—Ä–≤–æ–π '
                     f'–≤–∞–ª—é—Ç—ã> <–°—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞> \n\n'
                     f'–ù–∞–ø—Ä–∏–º–µ—Ä: EUR RUB 100\n\n '
                     )


def show_cit(message: telebot.types.Message):
    """Random quote output function.

            :arg message: request from bot.
            :return random quote.

            """
    now = datetime.now()
    cit_arr = []
    flag = 0
    table = openpyxl.reader.excel.load_workbook(filename="cit.xlsx")
    table.active = 0
    sheet = table.active
    for i in range(1, 52):
        cit = sheet['A' + str(i)].value
        cit_arr.append(cit)
    random_cit = random.choice(cit_arr)
    if flag == 0:
        bot.send_message(message.chat.id, random_cit)
        flag += 1
    elif flag > 0:
        bot.send_message(message.chat.id, "–•–≤–∞—Ç–∏—Ç")
