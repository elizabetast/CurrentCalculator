import telebot
from telebot.types import KeyboardButton, ReplyKeyboardMarkup
import requests
import json
from datetime import datetime

from config import bot, APPID, keys
from exceptions import ConvertionExeption
from utils import get_wind_direction, get_exchange_rate
from texts import KeyboardTexts


@bot.message_handler(commands=['start'])
def welcome_message(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True,
                                 row_width=2)
    weather_button = KeyboardButton(KeyboardTexts.WEATHER)
    currency_rate_button = KeyboardButton(KeyboardTexts.CURRENCY_RATE)
    exchange_currency_button = KeyboardButton(KeyboardTexts.EXCHANGE_CURRENCY)
    markup.add(weather_button, currency_rate_button, exchange_currency_button)
    bot.send_message(message.chat.id,
                     f"–ü—Ä–∏–≤–µ—Ç, {message.chat.username}."
                     f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
                     reply_markup=markup)


def request_forecast(message):
    """Function showing weather forecast for a day.

    :arg message: request from bot.

    :return: message with forecast data.

    """
    try:
        res = requests.get("http://api.openweathermap.org/data/2.5/forecast",
                           params={'id': 519690, 'units': 'metric',
                                   'lang': 'ru', 'APPID': APPID})
        data = res.json()
        today = datetime.now().day
        today_forecast = list(
            filter(lambda x: datetime.strptime(x["dt_txt"][:10], "%Y-%m-%d").day == today, data['list']))
        result = ["üå• –ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"]
        for i in today_forecast:
            time = datetime.strptime(i["dt_txt"], "%Y-%m-%d %H:%M:%S").strftime("%H:%M")
            result.append(
                f"‚è∞ {time}:\nüå° {i['main']['temp']} ¬∞C\nüí® {str(i['wind']['speed'])}–º/—Å. {i['weather'][0]['description']} –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {get_wind_direction(i['wind']['deg'])}\n")

        bot.send_message(message.chat.id, "\n".join(result))
    except Exception as e:
        bot.reply_to(message, f'–ü–æ–≥–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n{e}')


def converter(message: telebot.types.Message):
    """Money exchange function.

    :arg message: request from bot.

    :return: message with amount exchanged.

    """
    try:
        values = message.text.split()  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —Ç—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞

        if len(values) != 3:
            raise ConvertionExeption('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.')

        quote, base, amount = values
        if quote == base:
            raise ConvertionExeption(
                f'–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã {base}')

        try:
            quote_ticker = keys[quote.upper()]  # RUB

        except KeyError:
            raise ConvertionExeption(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞–ª—é—Ç—É {quote}')

        try:
            base_ticker = keys[base.upper()]  # EUR
        except KeyError:
            raise ConvertionExeption(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞–ª—é—Ç—É {base}')

        try:
            amount = float(amount)  # 1000
        except ValueError:
            raise ConvertionExeption(
                f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {amount}')

        r = requests.get(
            f'https://free.currconv.com/api/v7/convert?q={quote_ticker}_{base_ticker}&compact=ultra&apiKey=d84cf1bb0ece1d1a78a5')
        total_base = json.loads(r.content)
        total_base = total_base[f"{quote}_{base}"]
    except ConvertionExeption as e:
        bot.reply_to(message, f'–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n{e}')
    except Exception as e:
        bot.reply_to(message, f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É.\n{e}')
    else:
        text = f'{amount} {quote} = {round(float(total_base), 3) * amount} {base} '  # –≤—ã–≤–æ–¥ –ø–æ–¥—Å—á—ë—Ç–æ–≤
        bot.send_message(message.chat.id, text)


def request_available_currency(message: telebot.types.Message):
    """Function showing list of available currency.

    :arg message: request from bot.

    :return: message list of currency.

    """
    bot.send_message(message.chat.id, f'–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã: \n' \
                                      f'USD = {get_exchange_rate("usd")} RUB \n' \
                                      f'EUR = {get_exchange_rate("eur")} RUB')


def exchange_currency(message: telebot.types.Message):
    """Instruction of using exchange function.

    :arg message: request from bot.

    """
    bot.send_message(message.chat.id,
                     f'–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ–±–º–µ–Ω–Ω–∏–∫–æ–º –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞: \n\n'
                     f'<–ò–º—è –≤–∞–ª—é—Ç—ã, —Ü–µ–Ω—É –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å> <–ò–º—è –≤–∞–ª—é—Ç—ã, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞–¥–æ —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É –ø–µ—Ä–≤–æ–π '
                     f'–≤–∞–ª—é—Ç—ã> <–°—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞> \n\n')
